{"version":3,"file":"node-schematron.esm.js","sources":["../src/Namespace.ts","../src/Result.ts","../src/Assert.ts","../src/Variable.ts","../src/Rule.ts","../src/Pattern.ts","../src/Phase.ts","../src/Schema.ts"],"sourcesContent":["export class Namespace {\n\tprefix: string;\n\turi: string;\n\n\tconstructor(prefix: string, uri: string) {\n\t\tthis.prefix = prefix;\n\t\tthis.uri = uri;\n\t}\n\n\tstatic QUERY = `map {\n\t\t\"prefix\": @prefix/string(),\n\t\t\"uri\": @uri/string()\n\t}`;\n\n\tstatic fromJson(json: NamespaceJson): Namespace {\n\t\treturn new Namespace(json.prefix, json.uri);\n\t}\n}\n\nexport type NamespaceJson = {\n\tprefix: string;\n\turi: string;\n};\n","import { Assert } from './Assert';\n\nexport class Result {\n\t// pattern: Pattern;\n\t// phase?: Phase;\n\t// rule: Rule;\n\tassertId: string | null;\n\tisReport: boolean;\n\tcontext: Node;\n\tmessage?: string;\n\n\tconstructor(\n\t\t// pattern: Pattern,\n\t\t// phase?: Phase,\n\t\t// rule: Rule,\n\t\tcontext: Node,\n\t\tassert: Assert,\n\t\tmessage?: string\n\t) {\n\t\t// this.pattern = pattern;\n\t\t// this.phase = phase;\n\t\t// this.rule = rule;\n\t\tthis.assertId = assert.id;\n\t\tthis.isReport = assert.isReport;\n\t\tthis.context = context;\n\t\tthis.message = message;\n\t}\n\n\ttoJson() {\n\t\treturn {\n\t\t\tassertId: this.assertId,\n\t\t\tisReport: this.isReport,\n\t\t\tcontext: (this.context as HTMLElement).outerHTML,\n\t\t\tmessage: this.message\n\t\t};\n\t}\n}\n","import { evaluateXPathToBoolean, evaluateXPathToString } from 'fontoxpath';\n\nimport { Result } from './Result';\n\nimport { FontoxpathOptions } from './types';\n\nexport class Assert {\n\tid: string | null;\n\ttest: string;\n\tmessage: Array<string | Object>;\n\tisReport: boolean;\n\n\tconstructor(\n\t\tid: string | null,\n\t\ttest: string,\n\t\tmessage: Array<string | Object>,\n\t\tisReport: boolean\n\t) {\n\t\tthis.id = id;\n\t\tthis.test = test;\n\t\tthis.message = message;\n\t\tthis.isReport = isReport;\n\t}\n\n\tcreateMessageString(\n\t\tcontextNode: Node,\n\t\tvariables: Object,\n\t\tfontoxpathOptions: FontoxpathOptions,\n\t\tchunks: Array<string | any>\n\t): string {\n\t\treturn chunks\n\t\t\t.map((chunk): string => {\n\t\t\t\tif (typeof chunk === 'string') {\n\t\t\t\t\treturn chunk;\n\t\t\t\t}\n\n\t\t\t\t// <sch:name />\n\t\t\t\tif (chunk.$type === 'name') {\n\t\t\t\t\treturn evaluateXPathToString(\n\t\t\t\t\t\t'name(' + (chunk.path || '') + ')',\n\t\t\t\t\t\tcontextNode,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tfontoxpathOptions\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// <sch:value-of />\n\t\t\t\tif (chunk.$type === 'value-of') {\n\t\t\t\t\treturn evaluateXPathToString(\n\t\t\t\t\t\tchunk.select,\n\t\t\t\t\t\tcontextNode,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\tvariables,\n\t\t\t\t\t\tfontoxpathOptions\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconsole.log(chunk);\n\t\t\t\tthrow new Error('Unsupported element in <sch:message>');\n\t\t\t})\n\t\t\t.join('');\n\t}\n\n\tvalidateNode(\n\t\tcontext: Node,\n\t\tvariables: Object,\n\t\tfontoxpathOptions: FontoxpathOptions\n\t): Result | null {\n\t\tconst outcome = evaluateXPathToBoolean(\n\t\t\tthis.test,\n\t\t\tcontext,\n\t\t\tnull,\n\t\t\tvariables,\n\t\t\tfontoxpathOptions\n\t\t);\n\t\treturn (!this.isReport && outcome) || (this.isReport && !outcome)\n\t\t\t? null\n\t\t\t: new Result(\n\t\t\t\t\tcontext,\n\t\t\t\t\tthis,\n\t\t\t\t\tthis.createMessageString(context, variables, fontoxpathOptions, this.message)\n\t\t\t  );\n\t}\n\n\tstatic QUERY = `map {\n\t\t'id': if (@id) then string(@id) else (),\n\t\t'test': @test/string(),\n\t\t'message': array { (./text()|./element())/local:json(.) },\n\t\t'isReport': boolean(local-name() = 'report')\n\t}`;\n\n\tstatic fromJson(json: AssertJson): Assert {\n\t\treturn new Assert(json.id, json.test, json.message, json.isReport);\n\t}\n}\n\nexport type AssertJson = {\n\tid: string | null;\n\ttest: string;\n\tmessage: Array<string | Object>;\n\tisReport: boolean;\n};\n","import { evaluateXPath } from 'fontoxpath';\n\nimport { FontoxpathOptions } from './types';\n\nexport class Variable {\n\tname: string;\n\tvalue: string;\n\n\tconstructor(name: string, value: string) {\n\t\tthis.name = name;\n\t\tthis.value = value;\n\t}\n\n\tstatic reduceVariables(\n\t\tcontext: any,\n\t\tvariables: Variable[],\n\t\tfontoxpathOptions: FontoxpathOptions,\n\t\tinitial: Object | null\n\t): Object {\n\t\treturn variables.reduce(\n\t\t\t(mapping, variable) =>\n\t\t\t\tObject.assign(mapping, {\n\t\t\t\t\t[variable.name]: variable.value\n\t\t\t\t\t\t? evaluateXPath(\n\t\t\t\t\t\t\t\tvariable.value,\n\t\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tmapping,\n\t\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\t\tfontoxpathOptions\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: context\n\t\t\t\t}),\n\t\t\tinitial || {}\n\t\t);\n\t}\n\n\tstatic QUERY = `map {\n\t\t'name': @name/string(),\n\t\t'value': @value/string()\n\t}`;\n\n\tstatic fromJson(json: VariableJson): Variable {\n\t\treturn new Variable(json.name, json.value);\n\t}\n}\n\nexport type VariableJson = { name: string; value: string };\n","import { Assert, AssertJson } from './Assert';\nimport { Result } from './Result';\nimport { Variable, VariableJson } from './Variable';\n\nimport { FontoxpathOptions } from './types';\n\nexport class Rule {\n\tcontext: string;\n\tvariables: Variable[];\n\tasserts: Assert[];\n\n\tconstructor(context: string, variables: Variable[], asserts: Assert[]) {\n\t\tthis.context = context;\n\t\tthis.variables = variables;\n\t\tthis.asserts = asserts;\n\t}\n\n\tvalidateNode(\n\t\tcontext: Node,\n\t\tparentVariables: {} | null,\n\t\tfontoxpathOptions: FontoxpathOptions\n\t): Result[] {\n\t\tconst variables = Variable.reduceVariables(context, this.variables, fontoxpathOptions, {\n\t\t\t...parentVariables\n\t\t});\n\n\t\treturn this.asserts\n\t\t\t.map(assert => assert.validateNode(context, variables, fontoxpathOptions))\n\t\t\t.filter(result => result !== null) as Result[];\n\t}\n\n\tstatic QUERY = `map {\n\t\t'context': @context/string(),\n\t\t'variables': array { ./sch:let/${Variable.QUERY}},\n\t\t'asserts': array{ ./(sch:report|sch:assert)/${Assert.QUERY}}\n\t}`;\n\n\tstatic fromJson(json: RuleJson): Rule {\n\t\tconst variables = json.variables.map(rule => Variable.fromJson(rule));\n\t\tconst asserts = json.asserts.map(rule => Assert.fromJson(rule));\n\n\t\treturn new Rule(json.context, variables, asserts);\n\t}\n}\n\nexport type RuleJson = {\n\tcontext: string;\n\tvariables: VariableJson[];\n\tasserts: AssertJson[];\n};\n","import { evaluateXPathToNodes } from 'fontoxpath';\n\nimport { Result } from './Result';\nimport { Rule, RuleJson } from './Rule';\nimport { Variable, VariableJson } from './Variable';\n\nimport { FontoxpathOptions } from './types';\n\nexport class Pattern {\n\tid: string | null;\n\trules: Rule[];\n\tvariables: Variable[];\n\n\tconstructor(id: string | null, rules: Rule[], variables: Variable[]) {\n\t\tthis.id = id;\n\t\tthis.rules = rules;\n\t\tthis.variables = variables;\n\t}\n\n\tvalidateDocument(\n\t\tdocumentDom: Document,\n\t\tparentVariables: object | null,\n\t\tfontoxpathOptions: FontoxpathOptions\n\t) {\n\t\tconst variables = Variable.reduceVariables(documentDom, this.variables, fontoxpathOptions, {\n\t\t\t...parentVariables\n\t\t});\n\t\tconst ruleContexts = this.rules.map(rule =>\n\t\t\tevaluateXPathToNodes(\n\t\t\t\t'//(' + rule.context + ')',\n\t\t\t\tdocumentDom,\n\t\t\t\tnull,\n\t\t\t\tvariables,\n\t\t\t\tfontoxpathOptions\n\t\t\t)\n\t\t);\n\t\tconst flattenValidationResults = (results: Result[], node: Node): Result[] => {\n\t\t\tconst ruleIndex = ruleContexts.findIndex(context => context.includes(node));\n\t\t\tconst rule = ruleIndex >= 0 ? this.rules[ruleIndex] : null;\n\t\t\tif (rule) {\n\t\t\t\tresults.splice(\n\t\t\t\t\tresults.length,\n\t\t\t\t\t0,\n\t\t\t\t\t...rule.validateNode(node, variables, fontoxpathOptions)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn Array.from(node.childNodes).reduce(flattenValidationResults, results);\n\t\t};\n\n\t\treturn Array.from(documentDom.childNodes).reduce(flattenValidationResults, []);\n\t}\n\n\tstatic QUERY = `map {\n\t\t'id': @id/string(),\n\t\t'rules': array{ ./sch:rule/${Rule.QUERY}},\n\t\t'variables': array { ./sch:let/${Variable.QUERY}}\n\t}`;\n\n\tstatic fromJson(json: PatternJson): Pattern {\n\t\treturn new Pattern(\n\t\t\tjson.id,\n\t\t\tjson.rules.map(obj => Rule.fromJson(obj)),\n\t\t\tjson.variables.map(obj => Variable.fromJson(obj))\n\t\t);\n\t}\n}\n\nexport type PatternJson = {\n\tid: string | null;\n\trules: RuleJson[];\n\tvariables: VariableJson[];\n};\n","import { Variable, VariableJson } from './Variable';\n\nexport class Phase {\n\tid: string;\n\tactive: string[];\n\tvariables: Variable[];\n\n\tconstructor(id: string, active: string[], variables: Variable[]) {\n\t\tthis.id = id;\n\t\tthis.active = active;\n\t\tthis.variables = variables;\n\t}\n\n\tstatic QUERY = `map {\n\t\t\"id\": @id/string(),\n\t\t\"active\": array { ./sch:active/@pattern/string() },\n\t\t'variables': array { ./sch:let/${Variable.QUERY}}\n\t}`;\n\n\tstatic fromJson(json: PhaseJson): Phase {\n\t\treturn new Phase(\n\t\t\tjson.id,\n\t\t\tjson.active,\n\t\t\tjson.variables.map(rule => Variable.fromJson(rule))\n\t\t);\n\t}\n}\n\nexport type PhaseJson = {\n\tid: string;\n\tactive: string[];\n\tvariables: VariableJson[];\n};\n","import { evaluateXPath } from 'fontoxpath';\nimport { sync } from 'slimdom-sax-parser';\n\nimport { Namespace, NamespaceJson } from './Namespace';\nimport { Pattern, PatternJson } from './Pattern';\nimport { Phase, PhaseJson } from './Phase';\nimport { Result } from './Result';\nimport { Variable, VariableJson } from './Variable';\n\nimport { FontoxpathOptions } from './types';\n\nexport class Schema {\n\tpublic title: string;\n\tpublic defaultPhase: string | null;\n\tpublic variables: Variable[];\n\tpublic phases: Phase[];\n\tpublic patterns: Pattern[];\n\tpublic namespaces: Namespace[];\n\n\tconstructor(\n\t\ttitle: string,\n\t\tdefaultPhase: string | null,\n\t\tvariables: Variable[],\n\t\tphases: Phase[],\n\t\tpatterns: Pattern[],\n\t\tnamespaces: Namespace[]\n\t) {\n\t\tthis.title = title;\n\t\tthis.defaultPhase = defaultPhase;\n\t\tthis.variables = variables;\n\t\tthis.phases = phases;\n\t\tthis.patterns = patterns;\n\t\tthis.namespaces = namespaces;\n\t}\n\n\tvalidateString(documentXmlString: string, options?: ValidatorOptions): Result[] {\n\t\t// Typescript casting slimdom.Document to Document, which are the same\n\t\treturn this.validateDocument((sync(documentXmlString) as unknown) as Document, options);\n\t}\n\n\tvalidateDocument(documentDom: Document, options?: ValidatorOptions): Result[] {\n\t\tlet { phaseId, debug } = options || {};\n\t\tif (!phaseId) {\n\t\t\tphaseId = '#DEFAULT';\n\t\t}\n\t\tif (phaseId === '#DEFAULT') {\n\t\t\tphaseId = this.defaultPhase || '#ALL';\n\t\t}\n\t\tconst fontoxpathOptions: FontoxpathOptions = {\n\t\t\tnamespaceResolver: this.getNamespaceUriForPrefix.bind(this),\n\t\t\tdebug\n\t\t};\n\t\tconst variables = Variable.reduceVariables(\n\t\t\tdocumentDom,\n\t\t\tthis.variables,\n\t\t\tfontoxpathOptions,\n\t\t\t{}\n\t\t);\n\n\t\tif (phaseId === '#ALL') {\n\t\t\treturn this.patterns.reduce(\n\t\t\t\t(results: Result[], pattern) =>\n\t\t\t\t\tresults.concat(\n\t\t\t\t\t\tpattern.validateDocument(documentDom, variables, fontoxpathOptions)\n\t\t\t\t\t),\n\t\t\t\t[]\n\t\t\t);\n\t\t}\n\n\t\tconst phase = this.phases.find(phase => phase.id === phaseId);\n\t\tconst phaseVariables = Variable.reduceVariables(\n\t\t\tdocumentDom,\n\t\t\tphase?.variables || [],\n\t\t\tfontoxpathOptions,\n\t\t\t{\n\t\t\t\t...variables\n\t\t\t}\n\t\t);\n\n\t\treturn (\n\t\t\tphase?.active\n\t\t\t\t.map(patternId => this.patterns.find(pattern => pattern.id === patternId))\n\t\t\t\t.reduce(\n\t\t\t\t\t(results: Result[], pattern) =>\n\t\t\t\t\t\tresults.concat(\n\t\t\t\t\t\t\tpattern?.validateDocument(\n\t\t\t\t\t\t\t\tdocumentDom,\n\t\t\t\t\t\t\t\tphaseVariables,\n\t\t\t\t\t\t\t\tfontoxpathOptions\n\t\t\t\t\t\t\t) || []\n\t\t\t\t\t\t),\n\t\t\t\t\t[]\n\t\t\t\t) || []\n\t\t);\n\t}\n\n\t// TODO more optimally store the namespace prefix/uri mapping. Right now its modeled as an array because there\n\t// is a list of <ns> elements that are not really guaranteed to use unique prefixes.\n\tgetNamespaceUriForPrefix(prefix?: string | null): string | null {\n\t\tif (!prefix) {\n\t\t\treturn null;\n\t\t}\n\t\tconst ns = this.namespaces.find(ns => ns.prefix === prefix);\n\t\tif (!ns) {\n\t\t\tthrow new Error(\n\t\t\t\t`Namespace prefix \"${prefix}\" could not be resolved to an URI using <sch:ns>`\n\t\t\t);\n\t\t}\n\n\t\treturn ns.uri;\n\t}\n\n\tstatic QUERY = `\n\t\tdeclare namespace sch = 'http://purl.oclc.org/dsdl/schematron';\n\n\t\tdeclare function local:json($node as node()) {\n\t\t\tif ($node[self::text()])\n\t\t\t\tthen $node/string()\n\t\t\telse\n\t\t\tmap:merge((\n\t\t\t\tmap:entry('$type', $node/local-name()),\n\t\t\t\tfor $attr in $node/@*\n\t\t\t\t\treturn map:entry($attr/name(), $attr/string())\n\t\t\t))\n\t\t};\n\n\t\tlet $context := /*[1]\n\t\treturn map {\n\t\t\t'title': $context/@title/string(),\n\t\t\t'defaultPhase': $context/@defaultPhase/string(),\n\t\t\t'phases': array { $context/sch:phase/${Phase.QUERY}},\n\t\t\t'patterns': array { $context/sch:pattern/${Pattern.QUERY}},\n\t\t\t'variables': array { $context/sch:let/${Variable.QUERY}},\n\t\t\t'namespaces': array { $context/sch:ns/${Namespace.QUERY}}\n\t\t}\n\t`;\n\n\tstatic fromJson(json: SchemaJson): Schema {\n\t\treturn new Schema(\n\t\t\tjson.title,\n\t\t\tjson.defaultPhase,\n\t\t\tjson.variables.map(obj => Variable.fromJson(obj)),\n\t\t\tjson.phases.map(obj => Phase.fromJson(obj)),\n\t\t\tjson.patterns.map(obj => Pattern.fromJson(obj)),\n\t\t\tjson.namespaces.map(obj => Namespace.fromJson(obj))\n\t\t);\n\t}\n\n\tstatic fromDomToJson(schematronDom: Document): SchemaJson {\n\t\treturn evaluateXPath(Schema.QUERY, schematronDom, null, {}, undefined, {\n\t\t\tlanguage: evaluateXPath.XQUERY_3_1_LANGUAGE\n\t\t});\n\t}\n\n\tstatic fromDom(schematronDom: Document): Schema {\n\t\treturn Schema.fromJson(Schema.fromDomToJson(schematronDom));\n\t}\n\n\tstatic fromString(schematronXmlString: string): Schema {\n\t\treturn Schema.fromDom((sync(schematronXmlString) as unknown) as Document);\n\t}\n}\n\nexport type SchemaJson = {\n\ttitle: string;\n\tdefaultPhase: string | null;\n\tvariables: VariableJson[];\n\tphases: PhaseJson[];\n\tpatterns: PatternJson[];\n\tnamespaces: NamespaceJson[];\n};\n\nexport type ValidatorOptions = {\n\tphaseId?: string;\n\tdebug?: boolean;\n};\n"],"names":["Namespace","prefix","uri","fromJson","json","Result","context","assert","message","assertId","id","isReport","toJson","outerHTML","Assert","test","createMessageString","contextNode","variables","fontoxpathOptions","chunks","map","chunk","$type","evaluateXPathToString","path","select","console","log","Error","join","validateNode","outcome","evaluateXPathToBoolean","Variable","name","value","reduceVariables","initial","reduce","mapping","variable","Object","assign","evaluateXPath","undefined","Rule","asserts","parentVariables","filter","result","rule","QUERY","Pattern","rules","validateDocument","documentDom","ruleContexts","evaluateXPathToNodes","flattenValidationResults","results","node","ruleIndex","findIndex","includes","splice","length","Array","from","childNodes","obj","Phase","active","Schema","title","defaultPhase","phases","patterns","namespaces","validateString","documentXmlString","options","sync","phaseId","debug","namespaceResolver","getNamespaceUriForPrefix","bind","pattern","concat","phase","find","phaseVariables","patternId","ns","fromDomToJson","schematronDom","language","XQUERY_3_1_LANGUAGE","fromDom","fromString","schematronXmlString"],"mappings":"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"}