import { Namespace, NamespaceJson } from './Namespace';
import { Pattern, PatternJson } from './Pattern';
import { Phase, PhaseJson } from './Phase';
import { Result } from './Result';
import { Variable, VariableJson } from './Variable';
export declare class Schema {
    title: string;
    defaultPhase: string | null;
    variables: Variable[];
    phases: Phase[];
    patterns: Pattern[];
    namespaces: Namespace[];
    constructor(title: string, defaultPhase: string | null, variables: Variable[], phases: Phase[], patterns: Pattern[], namespaces: Namespace[]);
    validateString(documentXmlString: string, options?: ValidatorOptions): Result[];
    validateDocument(documentDom: Document, options?: ValidatorOptions): Result[];
    getNamespaceUriForPrefix(prefix?: string | null): string | null;
    static QUERY: string;
    static fromJson(json: SchemaJson): Schema;
    static fromDomToJson(schematronDom: Document): SchemaJson;
    static fromDom(schematronDom: Document): Schema;
    static fromString(schematronXmlString: string): Schema;
}
export declare type SchemaJson = {
    title: string;
    defaultPhase: string | null;
    variables: VariableJson[];
    phases: PhaseJson[];
    patterns: PatternJson[];
    namespaces: NamespaceJson[];
};
export declare type ValidatorOptions = {
    phaseId?: string;
    debug?: boolean;
};
